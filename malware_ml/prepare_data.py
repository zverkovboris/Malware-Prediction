import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler


DEFAULT_TARGET = 'HasDetections'
DEFAULT_ID = 'MachineIdentifier'
HASH_SPACE = 600
DEFAULT_CATEGORICAL_FEATURES = [
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'Platform',
    'Processor',
    'OsVer',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'PuaMode',
    'SmartScreen',
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_ProcessorClass',
    'Census_PrimaryDiskTypeName',
    'Census_ChassisTypeName',
    'Census_PowerPlatformRoleName',
    'Census_InternalBatteryType',
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_FlightRing'
]

DEFAULT_COLUMNS =[
    'MachineIdentifier',
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'IsBeta',
    'RtpStateBitfield',
    'IsSxsPassiveMode',
    'DefaultBrowsersIdentifier',
    'AVProductStatesIdentifier',
    'AVProductsInstalled',
    'AVProductsEnabled',
    'HasTpm',
    'CountryIdentifier',
    'CityIdentifier',
    'OrganizationIdentifier',
    'GeoNameIdentifier',
    'LocaleEnglishNameIdentifier',
    'Platform',
    'Processor',
    'OsVer',
    'OsBuild',
    'OsSuite',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'IsProtected',
    'AutoSampleOptIn',
    'PuaMode',
    'SMode',
    'IeVerIdentifier',
    'SmartScreen',
    'Firewall',
    'UacLuaenable',
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_OEMNameIdentifier',
    'Census_OEMModelIdentifier',
    'Census_ProcessorCoreCount',
    'Census_ProcessorManufacturerIdentifier',
    'Census_ProcessorModelIdentifier',
    'Census_ProcessorClass',
    'Census_PrimaryDiskTotalCapacity',
    'Census_PrimaryDiskTypeName',
    'Census_SystemVolumeTotalCapacity',
    'Census_HasOpticalDiskDrive',
    'Census_TotalPhysicalRAM',
    'Census_ChassisTypeName',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_PowerPlatformRoleName',
    'Census_InternalBatteryType',
    'Census_InternalBatteryNumberOfCharges',
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSBuildNumber',
    'Census_OSBuildRevision',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSInstallLanguageIdentifier',
    'Census_OSUILocaleIdentifier',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_IsPortableOperatingSystem',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_IsFlightingInternal',
    'Census_IsFlightsDisabled',
    'Census_FlightRing',
    'Census_ThresholdOptIn',
    'Census_FirmwareManufacturerIdentifier',
    'Census_FirmwareVersionIdentifier',
    'Census_IsSecureBootEnabled',
    'Census_IsWIMBootEnabled',
    'Census_IsVirtualDevice',
    'Census_IsTouchEnabled',
    'Census_IsPenCapable',
    'Census_IsAlwaysOnAlwaysConnectedCapable',
    'Wdft_IsGamer',
    'Wdft_RegionIdentifier',
    'HasDetections'
]


def prepare(json_data):
    df = pd.DataFrame(json_data)
    df = pd.DataFrame(columns=DEFAULT_COLUMNS, data=np.array([[df[i][0] for i in DEFAULT_COLUMNS]]))
    df = df.drop(columns=[DEFAULT_TARGET, DEFAULT_ID])
    for category in DEFAULT_CATEGORICAL_FEATURES:
        df[category] = pd.DataFrame([hash(s) % HASH_SPACE for s in df[category]])
    df = df.replace(np.nan, 0)
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaler.fit(df)
    df = scaler.transform(df)
    return df
